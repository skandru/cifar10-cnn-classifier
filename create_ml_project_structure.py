#!/usr/bin/env python3
"""
CIFAR-10 CNN Project Structure Generator - Directory and Empty Files Only

This script creates the complete directory structure and empty files for the
CIFAR-10 CNN classifier project. You can then manually copy code into each file.

Usage:
    python Create_ML_Project_Structure.py [project_name]

Example:
    python Create_ML_Project_Structure.py my-cifar10-project
    python Create_ML_Project_Structure.py  # Uses default name 'cifar10-cnn-classifier'
"""

import os
import sys
from pathlib import Path
import argparse
from datetime import datetime


class ProjectStructureGenerator:
    """Generate ML project structure with empty files"""
    
    def __init__(self, project_name="cifar10-cnn-classifier"):
        self.project_name = project_name
        self.project_path = Path(project_name)
        self.created_files = []
        self.created_dirs = []
    
    def create_directory_structure(self):
        """Create all necessary directories"""
        directories = [
            "src",
            "notebooks", 
            "checkpoints",
            "results",
            "configs",
            "logs",
            "data",  # For dataset storage
            "tests",  # For unit tests
        ]
        
        print(f"üèóÔ∏è Creating project: {self.project_name}")
        print("=" * 50)
        
        # Create main project directory
        self.project_path.mkdir(exist_ok=True)
        self.created_dirs.append(str(self.project_path))
        
        # Create subdirectories
        for directory in directories:
            dir_path = self.project_path / directory
            dir_path.mkdir(exist_ok=True)
            self.created_dirs.append(str(dir_path))
            print(f"‚úÖ Created directory: {directory}/")
    
    def create_empty_file(self, filepath, description=""):
        """Create an empty file with comment header"""
        full_path = self.project_path / filepath
        
        # Ensure parent directory exists
        full_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Create file with appropriate comment based on extension
        file_ext = full_path.suffix
        
        if file_ext == '.py':
            content = f'"""\n{description}\n\nTODO: Add implementation here\n"""\n\n# Add your code here\n'
        elif file_ext == '.yaml' or file_ext == '.yml':
            content = f'# {description}\n# TODO: Add configuration here\n\n'
        elif file_ext == '.md':
            content = f'# {description}\n\nTODO: Add documentation here\n'
        elif file_ext == '.txt':
            content = f'# {description}\n# TODO: Add content here\n\n'
        elif file_ext == '.ipynb':
            content = '''{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ''' + description + '''\\n",
    "\\n",
    "TODO: Add notebook content here"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}'''
        else:
            content = f'# {description}\n# TODO: Add content here\n'
        
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        self.created_files.append(str(full_path))
        print(f"‚úÖ Created file: {filepath} {description}")
    
    def create_all_files(self):
        """Create all project files"""
        print("\nüìù Creating project files...")
        
        # Source files
        self.create_empty_file("src/__init__.py", "(Package initialization)")
        self.create_empty_file("src/model.py", "(CNN architecture)")
        self.create_empty_file("src/dataset.py", "(Dataset handling)")
        self.create_empty_file("src/train.py", "(Training pipeline)")
        self.create_empty_file("src/utils.py", "(Utility functions)")
        self.create_empty_file("src/visualize.py", "(Visualization tools)")
        
        # Main execution file
        self.create_empty_file("main.py", "(Main execution script)")
        
        # Configuration
        self.create_empty_file("configs/config.yaml", "(Configuration file)")
        
        # Dependencies and documentation
        self.create_empty_file("requirements.txt", "(Dependencies)")
        self.create_empty_file("README.md", "(Project documentation)")
        
        # Jupyter notebooks
        self.create_empty_file("notebooks/exploration.ipynb", "Data exploration")
        self.create_empty_file("notebooks/experiments.ipynb", "Model experiments")
        self.create_empty_file("notebooks/analysis.ipynb", "Results analysis")
        
        # Test files
        self.create_empty_file("tests/__init__.py", "(Test package)")
        self.create_empty_file("tests/test_model.py", "(Model tests)")
        self.create_empty_file("tests/test_dataset.py", "(Dataset tests)")
        self.create_empty_file("tests/test_train.py", "(Training tests)")
        
        # Placeholder files for directories (gitkeep style)
        self.create_empty_file("data/.gitkeep", "(Dataset storage directory)")
        self.create_empty_file("checkpoints/.gitkeep", "(Model checkpoints directory)")
        self.create_empty_file("results/.gitkeep", "(Results and plots directory)")
        self.create_empty_file("logs/.gitkeep", "(Training logs directory)")
        
        # Additional useful files
        self.create_empty_file(".gitignore", "(Git ignore file)")
        self.create_empty_file("setup.py", "(Package setup file)")
        self.create_empty_file("LICENSE", "(License file)")
    
    def create_gitignore_content(self):
        """Create .gitignore with ML project specific ignores"""
        gitignore_content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Jupyter Notebook
.ipynb_checkpoints

# Data
data/cifar-10-batches-py/
data/cifar-10-python.tar.gz
*.pkl
*.pickle

# Model checkpoints
checkpoints/*.pth
checkpoints/*.pt

# Results
results/*.png
results/*.jpg
results/*.pdf

# Logs
logs/*.log
logs/*.txt

# OS
.DS_Store
Thumbs.db

# Temporary files
*.tmp
*.temp
"""
        
        gitignore_path = self.project_path / ".gitignore"
        with open(gitignore_path, 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        
        print("‚úÖ Created file: .gitignore (Git ignore rules)")
    
    def print_file_map(self):
        """Print a map of what code goes in which file"""
        print("\n" + "="*60)
        print("üìã FILE MAPPING - WHAT CODE GOES WHERE")
        print("="*60)
        
        file_mapping = {
            "src/__init__.py": "Package initialization and imports",
            "src/model.py": "CIFAR10CNN class - CNN architecture implementation", 
            "src/dataset.py": "CIFAR10CustomDataset class and data transforms",
            "src/train.py": "Training functions: train_epoch, validate_epoch, train_model",
            "src/utils.py": "MetricsTracker, ModelCheckpoint, utility functions",
            "src/visualize.py": "Plotting functions: training history, predictions, confusion matrix",
            "main.py": "Main execution script that orchestrates training",
            "configs/config.yaml": "YAML configuration with hyperparameters",
            "requirements.txt": "List of Python dependencies",
            "README.md": "Project documentation and setup instructions"
        }
        
        for filepath, description in file_mapping.items():
            print(f"üìÑ {filepath:<25} ‚Üí {description}")
        
        print("\n" + "="*60)
        print("üí° COPY CODE STRATEGY:")
        print("="*60)
        print("1. Copy each code section from the artifact to its corresponding file")
        print("2. Replace the TODO comments with the actual implementation")
        print("3. Start with src/model.py, then src/dataset.py, etc.")
        print("4. Test each module individually before running main.py")
    
    def print_summary(self):
        """Print project creation summary"""
        print("\n" + "="*60)
        print("üéâ PROJECT STRUCTURE CREATED!")
        print("="*60)
        print(f"üìÅ Project Name: {self.project_name}")
        print(f"üìÇ Directories: {len(self.created_dirs)}")
        print(f"üìÑ Files: {len(self.created_files)}")
        
        print("\nüöÄ NEXT STEPS:")
        print("-" * 30)
        print(f"1. cd {self.project_name}")
        print("2. Copy code from the provided code sections into corresponding files")
        print("3. pip install -r requirements.txt")
        print("4. python main.py")
        
        print(f"\nüìÅ PROJECT STRUCTURE CREATED:")
        print("-" * 30)
        print(f"{self.project_name}/")
        print("‚îú‚îÄ‚îÄ src/")
        print("‚îÇ   ‚îú‚îÄ‚îÄ __init__.py")
        print("‚îÇ   ‚îú‚îÄ‚îÄ model.py         ‚Üê Copy CIFAR10CNN class here")
        print("‚îÇ   ‚îú‚îÄ‚îÄ dataset.py       ‚Üê Copy dataset and transforms here") 
        print("‚îÇ   ‚îú‚îÄ‚îÄ train.py         ‚Üê Copy training functions here")
        print("‚îÇ   ‚îú‚îÄ‚îÄ utils.py         ‚Üê Copy utilities here")
        print("‚îÇ   ‚îî‚îÄ‚îÄ visualize.py     ‚Üê Copy visualization functions here")
        print("‚îú‚îÄ‚îÄ notebooks/")
        print("‚îÇ   ‚îú‚îÄ‚îÄ exploration.ipynb")
        print("‚îÇ   ‚îú‚îÄ‚îÄ experiments.ipynb")
        print("‚îÇ   ‚îî‚îÄ‚îÄ analysis.ipynb")
        print("‚îú‚îÄ‚îÄ configs/")
        print("‚îÇ   ‚îî‚îÄ‚îÄ config.yaml      ‚Üê Copy YAML configuration here")
        print("‚îú‚îÄ‚îÄ tests/")
        print("‚îÇ   ‚îú‚îÄ‚îÄ __init__.py")
        print("‚îÇ   ‚îú‚îÄ‚îÄ test_model.py")
        print("‚îÇ   ‚îú‚îÄ‚îÄ test_dataset.py")
        print("‚îÇ   ‚îî‚îÄ‚îÄ test_train.py")
        print("‚îú‚îÄ‚îÄ checkpoints/         (empty - for model saves)")
        print("‚îú‚îÄ‚îÄ results/             (empty - for plots)")
        print("‚îú‚îÄ‚îÄ logs/                (empty - for training logs)")
        print("‚îú‚îÄ‚îÄ data/                (empty - for CIFAR-10 dataset)")
        print("‚îú‚îÄ‚îÄ main.py              ‚Üê Copy main execution script here")
        print("‚îú‚îÄ‚îÄ requirements.txt     ‚Üê Copy dependencies list here")
        print("‚îú‚îÄ‚îÄ README.md            ‚Üê Copy documentation here")
        print("‚îú‚îÄ‚îÄ .gitignore")
        print("‚îú‚îÄ‚îÄ setup.py")
        print("‚îî‚îÄ‚îÄ LICENSE")
        
        print("\n‚ú® All directories and files created successfully!")
        print(f"üìç Location: ./{self.project_name}/")
        print("üìù Ready for you to copy the code into each file!")
    
    def generate_project(self):
        """Generate complete project structure"""
        try:
            self.create_directory_structure()
            self.create_all_files()
            self.create_gitignore_content()
            self.print_file_map()
            self.print_summary()
            return True
        except Exception as e:
            print(f"‚ùå Error creating project: {e}")
            return False


def get_project_name():
    """Interactive function to get project name from user"""
    print("ü§ñ CIFAR-10 CNN Project Structure Generator")
    print("üìÅ Creating directories and empty files only")
    print("=" * 50)
    
    # Ask for project name
    while True:
        project_name = input("üìù Enter project folder name (default: cifar10-cnn-classifier): ").strip()
        
        # Use default if empty
        if not project_name:
            project_name = "cifar10-cnn-classifier"
        
        # Validate project name
        if not project_name.replace("-", "").replace("_", "").replace(".", "").isalnum():
            print("‚ùå Invalid project name. Use only letters, numbers, hyphens, and underscores.")
            continue
        
        # Check if directory already exists
        if os.path.exists(project_name):
            print(f"‚ö†Ô∏è  Directory '{project_name}' already exists!")
            response = input("   Continue anyway? (y/N): ").strip().lower()
            if response == 'y' or response == 'yes':
                break
            else:
                continue
        else:
            break
    
    return project_name


def main():
    """Main function to run the project generator"""
    # Interactive mode - ask for project name
    if len(sys.argv) == 1:
        project_name = get_project_name()
    else:
        # Command line argument mode
        parser = argparse.ArgumentParser(description='Create CIFAR-10 CNN project structure with empty files')
        parser.add_argument('project_name', nargs='?', default='cifar10-cnn-classifier',
                           help='Name of the project directory (default: cifar10-cnn-classifier)')
        
        args = parser.parse_args()
        project_name = args.project_name
        
        print("ü§ñ CIFAR-10 CNN Project Structure Generator")
        print("üìÅ Creating directories and empty files only")
        print("=" * 50)
        print(f"üìÅ Using project name: {project_name}")
        
        # Check if project directory already exists
        if os.path.exists(project_name):
            response = input(f"‚ö†Ô∏è  Directory '{project_name}' already exists. Continue? (y/N): ")
            if response.lower() != 'y':
                print("‚ùå Project generation cancelled.")
                return
    
    # Generate project
    print(f"\nüèóÔ∏è Creating project structure for: {project_name}")
    generator = ProjectStructureGenerator(project_name)
    success = generator.generate_project()
    
    if success:
        print(f"\nüéØ SUCCESS! Empty project structure created in '{project_name}/'")
        print("üìù Now you can manually copy the code into each file!")
        print(f"üí° Next: cd {project_name}")
    else:
        print(f"\nüí• FAILED! There was an error creating the project structure.")


if __name__ == "__main__":
    main()